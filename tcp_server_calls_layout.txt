These are the calls that the client can make to the server

//Headers//
FF=error
00=ping
01=Manifest
02=File Transfer
03=Backup File Request
04=List maps OR versions of map
05=Compile Request
06=Login


//error//
start [package length] byte 4; Range {00 00 00 00} - {7F FF FF FF}
for [package length]=[package contense] byte 1

//ping//
no packet body

//Manifest//
Same package layout as //File Transfer// But with restricitions on naming convention and file format.
Servs as list of files in upload batch

//File Transfer//
start [name len]; byte 1; Range {00} - {FF}
for [name len]=[name contense] bytes of file name; Returns error if char ![a-zA-Z0-9_.-] OR if not included in manifest.
after [name contense]=[file len]; byte 4; Range {00 00 00 00} - {7F FF FF FF}
for [file len]=[file contense]; TODO: Decide if break conn here?
after [file contense]=[next header]

//Backup File Request//
Same package format as //Manifest// but returns files instead of accepting files.
TODO: Decide how to determine what version to is the right one to send back

//List maps OR versions of map//
start [request type]; byte 1
	00=List Maps
	01=List Versions of map
IF [request type]==00->Skip to [next header]
ELSE IF [request type]==01
	after [request type]=[len map name] byte 1; Range {00} - {FF}
	for [len map name]=[map name contense] byte 1; Returns error if char ![a-zA-Z0-9_.-] OR if no record of map exists

//Compile Request//
start [compile type]; byte 1
	00=Complete compile
	01=Lighting
	02=BSP
	03=Reflections
	04=Build FF
	05=Zone
after [compile type]=[len map name] byte 1; Range {00} - {FF}
for [len map name]=[map name contense] bytes 1; Returns error if char ![a-zA-Z0-9_.-] OR if no record of map exists
IF [compile type]==00->Skip to [next header]
after [len map name]=[args len] byte 2; Range {00 00} - {7F FF}
for [args len]=[args contense] bytes 1; Returns error if ![a-zA-Z0-9_.\-\\ ] TODO: Verify what will escape from cmd and into system teritory and stop that shit
after [args contense]=[next header]; TODO: Decide if break conn here?

//Login//
start [flags]; byte 1
	00=Always associate IP with login
	01=Associate IP with login for time t
after [flags]=[login hash] byte 256; SHA256 hash
IF [flags]==01
	after [login hash]=[login timeout] byte 4; Minutes to stay logged in
-- I am fully aware that this is a pretty insecure way to handle this, but I don't care to make a more secure login system for this.
